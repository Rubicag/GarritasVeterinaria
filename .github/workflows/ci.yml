name: CI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [21]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Make mvnw executable
        run: chmod +x mvnw || true

      - name: Build (tests + package)
        run: ./mvnw -B -U clean package

      - name: Generate JaCoCo report (HTML)
        run: ./mvnw -B org.jacoco:jacoco-maven-plugin:report

      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: GarritasVeterinaria-war
          path: target/GarritasVeterinaria-1.0-SNAPSHOT.war

      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco

  release:
    name: Create GitHub Release from tag
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download WAR artifact
        uses: actions/download-artifact@v4
        with:
          name: GarritasVeterinaria-war

      - name: Determine release version (maven)
        id: extract_version
        run: |
          echo "Obtaining project.version via mvn..."
          version=$(./mvnw -q -DforceStdout help:evaluate -Dexpression=project.version)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Verify tag matches pom version
        run: |
          release_tag=${GITHUB_REF#refs/tags/}
          echo "Release tag: $release_tag"
          echo "POM version: ${{ steps.extract_version.outputs.version }}"
          if [ "$release_tag" != "v${{ steps.extract_version.outputs.version }}" ]; then
            echo "Tag does not match pom.xml version: expected v${{ steps.extract_version.outputs.version }} but got $release_tag"
            exit 1
          fi

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find downloaded WAR
        id: find_war
        run: |
          WAR_PATH=$(find . -type f -name "*.war" | head -n 1)
          if [ -z "$WAR_PATH" ]; then
            echo "No WAR found in workspace â€” failing"
            ls -la . || true
            exit 1
          fi
          echo "Found WAR: $WAR_PATH"
          echo "war_path=$WAR_PATH" >> $GITHUB_OUTPUT

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_war.outputs.war_path }}
          asset_name: GarritasVeterinaria-${{ steps.extract_version.outputs.version }}.war
          asset_content_type: application/java-archive

